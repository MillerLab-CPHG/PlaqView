cancer = NULL,
tissue = 'Lung') # you gotta specific the tissue type here
clu_ann <- scCATCH(clu_markers_covid_combined_0to10$clu_markers,
species = 'Human',
cancer = NULL,
tissue = 'Lung') # you gotta specific the tissue type here
View(clu_ann)
View(clu_ann)
devtools::install_github("dynverse/dyno")
usethis::browse_github_pat()
usethis::edit_r_environ()
library(monocle3)
#### Monocle 3 ####
#### Library ----
# BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
#                       'limma', 'S4Vectors', 'SingleCellExperiment',
#                       'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
# install.packages("devtools")
# devtools::install_github('cole-trapnell-lab/leidenbase')
# devtools::install_github('cole-trapnell-lab/monocle3')
library(monocle3)
library(tidyverse)
library(readr)
#### loading example dataset ----
# Load the data
expression_matrix <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_expression.rds"))
cell_metadata <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_colData.rds"))
gene_annotation <- readRDS(url("http://staff.washington.edu/hpliner/data/cao_l2_rowData.rds"))
# Make the CDS object
# note if using 10x data from cell range you can directly use
# cds <- load_cellranger_data("~/Downloads/10x_data")
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
saveRDS(cds, file = "example_monocle3_data.rds") # just to have a backup of the data
#### cds preprocessing
# e.g. PCA
cds <- preprocess_cds(cds, num_dim = 100)
# to call for elbow plot
plot_pc_variance_explained(cds)
reduce_dimension
#### dimentionality reduction ----
cds <- reduce_dimension(cds)
install.packages("remotes")
remotes::install_github("dynverse/scvelo")
#### call up the scvelo from the dynverse ----
# the dyno calls for counts and normalzied counts
data("fibroblast_reprogramming_treutlein")
library(Seurat)
library(tidyverse)
library(dyno) # https://dynverse.org/dyno/
#### call up the scvelo from the dynverse ----
# the dyno calls for counts and normalzied counts
data("fibroblast_reprogramming_treutlein")
force(fibroblast_reprogramming_treutlein)
View(fibroblast_reprogramming_treutlein)
covid.final <- readRDS("~/Desktop/LOCAL_cache/COVID19_Liao_et_al/Combined_moderate_and_severe.rds")
View(covid.final)
View(fibroblast_reprogramming_treutlein$counts)
fibroblast_reprogramming_treutlein$counts
View(covid.final)
View(clu_markers_covid_combined_0to10)
View(fibroblast_reprogramming_treutlein)
covid.final@assays[["RNA"]]@data
covid.final@assays[["RNA"]]@counts
dataset <- wrap_expression(
counts = fibroblast_reprogramming_treutlein$counts,
expression = fibroblast_reprogramming_treutlein$expression
)
View(covid.final)
covid.data.wrapped <- wrap_expression(
counts = covid.final@assays[["RNA"]]@counts,
expression = covid.final@assays[["RNA"]]@data
)
guidelines <- guidelines_shiny(dataset)
View(gene_annotation)
View(covid.data.wrapped)
View(covid.final)
View(covid.data.wrapped)
#### selecting a method using the shiny app ---- (optional)
guidelines <- guidelines_shiny(dataset)
#### selecting a method using the shiny app ---- (optional)
guidelines <- guidelines_shiny(dataset)
methods <- guidelines$methods %>% filter(selected) %>% pull(method_id) %>% first()
#### we know we wanna use scVELO, so here we go ----
model <- infer_trajectory(dataset, first(methods))
#'
#' "scvelo" allows you to estimate velocity vectors for each cell and gene in a single-cell expression dataset.
#'
#' @import reticulate
#' @import assertthat
#' @importFrom purrr %>% map pmap_dbl
#' @importFrom dplyr filter mutate arrange
#'
#' @docType package
#' @name scvelo
NULL
global reference to scipy (will be initialized in .onLoad)
scvelo <- NULL
scanpy <- NULL
anndata <- NULL
.onLoad <- function(libname, pkgname) {
# use superassignment to update global reference to scipy
scvelo <<- import("scvelo", delay_load = TRUE)
scanpy <<- import("scanpy", delay_load = TRUE)
anndata <<- import("anndata", delay_load = TRUE)
}
.onAttach <- function(libname, pkgname) {
if (!py_module_available("scvelo")) {
packageStartupMessage("The scvelo python package is not installed. Install it using `scvelo::install_scvelo()`")
} else {
vers <- package_version(gsub("\\.dev.*", "", scvelo$`__version__`))
if (vers < "0.1.26") {
packageStartupMessage("The scvelo python package should be >= 0.1.26. Install the scvelo from Github using `scvelo::install_scvelo()`")
}
}
}
install_scvelo <- function(method = "auto", conda = "auto") {
message("Installing scvelo through bioconda currently does not work, will install scvelo from Github using pip.")
# py_install("scvelo", method = "pip")
reticulate::py_install(packages = "git+https://github.com/theislab/scvelo.git", pip = TRUE)
}
#### selecting a method using the shiny app ---- (optional)
guidelines <- guidelines_shiny(dataset)
methods <- guidelines$methods %>% filter(selected) %>% pull(method_id) %>% first()
#### here we will call for the default methods the tutorial use ----
model <- infer_trajectory(dataset, first(methods))
#### selecting a method using the shiny app ---- (optional)
guidelines <- guidelines_shiny(dataset)
guidelines <- guidelines_shiny(dataset)
#### here we will call for the default methods the tutorial use ----
model <- infer_trajectory(dataset = covid.data.wrapped, method = "Slingshot")
#### here we will call for the default methods the tutorial use ----
model <- infer_trajectory(dataset = covid.data.wrapped, method = "Slingshot")
#### here we will call for the default methods the tutorial use ----
model <- infer_trajectory(dataset = covid.data.wrapped, method = "slingshot")
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
ldat <- ReadVelocity(file = "~/Downloads/SCG71.loom")
ldat <- ReadVelocity(file = "~/Downloads/SCG71.loom")
ldat <- ReadVelocity(file = "~/Downloads/SCG71.loom")
library(Seurat)
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
# If you don't have velocyto's example mouse bone marrow dataset, download with the CURL command
curl::curl_download(url = 'http://pklab.med.harvard.edu/velocyto/mouseBM/SCG71.loom', destfile
= '~/Downloads/SCG71.loom')
ldat <- ReadVelocity(file = "~/Downloads/SCG71.loom")
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
ldat <- ReadVelocity(file = "~/Downloads/SCG71.loom")
options(buildtools.check = function(action) TRUE )
ldat <- ReadVelocity(file = "~/Downloads/SCG71.loom")
ldat <- ReadVelocity(file = "~/Downloads/SCG71.loom")
-v
install.packages("devtools")
ldat <- ReadVelocity(file = "~/Downloads/SCG71.loom")
install.packages("clang")
remove.packages("Seurat")
install.packages('Seurat')
library(Seurat)
shiny::runApp('Desktop/TestApp/scRNA_CAD')
shiny::runApp('Desktop/LOCAL_cache/sCADView')
runApp('Desktop/LOCAL_cache/sCADView')
runApp('Desktop/LOCAL_cache/sCADView')
shiny::runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp()
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
enriched[[input$selectedenrichRdb]
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
date()
date()
sessionInfo()
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
shiny::runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
writeLines(sessionInfo(),
file)
write.table(sessionInfo(),
file)
class(sessionInfo())
as.table(sessionInfo())
write_lines(sessionInfo())
write_lines(sessionInfo(), file = "test")
write_lines(sessionInfo(), file = "test.txt")
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
runApp('Desktop/LOCAL_cache/PlaqView')
#### LOADING DATA ####
# below line is commented for shinyapp.io deployment temp
stanford <- readRDS(file = "data/final_stanford_labeled.rds")
#### LIBRARIES ####
library(BiocManager)
library(shiny)
library(shinythemes)
library(Seurat)
library(shinybusy) #install.packages("shinybusy")
library(tidyverse)
library(enrichR) # install.packages("enrichR")
setwd("~/Desktop/LOCAL_cache/PlaqView")
#### LOADING DATA ####
# below line is commented for shinyapp.io deployment temp
stanford <- readRDS(file = "data/final_stanford_labeled.rds")
# color definitions
manual_color_list <-
{c("rosybrown2",
"cadetblue1",
"lemonchiffon3",
"darkseagreen",
"skyblue3",
"thistle3",
"cadetblue3",
"darkseagreen1",
"palevioletred3",
"palevioletred1",
"darkseagreen2",
"rosybrown3",
"thistle2",
"lightsteelblue3",
"salmon1",
"palevioletred4",
"lemonchiffon4",
"cadetblue2"
)}
DimPlot(
stanford,
reduction = "umap",
label = TRUE,
label.size = 3,
repel = T,
# repel labels
pt.size = 1,
cols = manual_color_list,
group.by = input$leftlabeloutput ) + # group.by is important, use this to call metadata separation
theme(legend.position="bottom",
legend.box = "vertical") +
ggtitle("UMAP by Cell Type") +
theme(plot.title = element_text(hjust =  0.5)) +
guides(color = guide_legend(nrow = 5))
input$leftlabeloutput <- "SingleR.calls"
input <- 0
input$leftlabeloutput <- "SingleR.calls"
DimPlot(
stanford,
reduction = "umap",
label = TRUE,
label.size = 3,
repel = T,
# repel labels
pt.size = 1,
cols = manual_color_list,
group.by = input$leftlabeloutput ) + # group.by is important, use this to call metadata separation
theme(legend.position="bottom",
legend.box = "vertical") +
ggtitle("UMAP by Cell Type") +
theme(plot.title = element_text(hjust =  0.5)) +
guides(color = guide_legend(nrow = 5))
View(stanford)
runApp()
DimPlot(
stanford,
reduction = "umap",
label = TRUE,
label.size = 3,
repel = T,
# repel labels
pt.size = 1,
cols = manual_color_list,
group.by = input$rightlabeloutput ) + # group.by is important, use this to call metadata separation
theme(legend.position="bottom",
legend.box = "vertical") +
ggtitle("UMAP by Cell Type") +
theme(plot.title = element_text(hjust =  0.5)) +
guides(color = guide_legend(nrow = 5))
View(stanford)
output$rightlabelplot <-
renderPlot(
DimPlot(
stanford,
reduction = "umap",
label = TRUE,
label.size = 3,
repel = T,
# repel labels
pt.size = 1,
cols = manual_color_list,
group.by = "seuratclusters" ) + # group.by is important, use this to call metadata separation
theme(legend.position="bottom",
legend.box = "vertical") +
ggtitle("UMAP by Cell Type") +
theme(plot.title = element_text(hjust =  0.5)) +
guides(color = guide_legend(nrow = 5))
)# render plot
DimPlot(
stanford,
reduction = "umap",
label = TRUE,
label.size = 3,
repel = T,
# repel labels
pt.size = 1,
cols = manual_color_list,
group.by = "seuratclusters" ) + # group.by is important, use this to call metadata separation
theme(legend.position="bottom",
legend.box = "vertical") +
ggtitle("UMAP by Cell Type") +
theme(plot.title = element_text(hjust =  0.5)) +
guides(color = guide_legend(nrow = 5))
output$rightlabelplot <-
renderPlot(
DimPlot(
stanford,
reduction = "umap",
label = TRUE,
label.size = 3,
repel = T,
# repel labels
pt.size = 1,
cols = manual_color_list,
group.by = "seurat_clusters" ) + # group.by is important, use this to call metadata separation
theme(legend.position="bottom",
legend.box = "vertical") +
ggtitle("UMAP by Cell Type") +
theme(plot.title = element_text(hjust =  0.5)) +
guides(color = guide_legend(nrow = 5))
)# render plot
DimPlot(
stanford,
reduction = "umap",
label = TRUE,
label.size = 3,
repel = T,
# repel labels
pt.size = 1,
cols = manual_color_list,
group.by = "seurat_clusters" ) + # group.by is important, use this to call metadata separation
theme(legend.position="bottom",
legend.box = "vertical") +
ggtitle("UMAP by Cell Type") +
theme(plot.title = element_text(hjust =  0.5)) +
guides(color = guide_legend(nrow = 5))
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
vignette("RaceID")
nstall_github("dgrun/RaceID3_StemID2_package")
install_github("dgrun/RaceID3_StemID2_package")
library(devtools)
install_github("dgrun/RaceID3_StemID2_package")
library(RaceID)
vignette("RaceID")
renv::activate()
#### LIBRARIES ####
# library(BiocManager)
library(shiny)
library(shinythemes)
library(Seurat)
library(shinybusy) #install.packages("shinybusy")
library(enrichR) # install.packages("enrichR")
# library(imager)
library(waiter)
library(DT)
library(readxl)
library(shinyWidgets)
library(shinyjs)
# library(RColorBrewer)
library(rDGIdb) # BiocManager::install("rDGIdb")
library(tidyverse)
library(rsconnect)
# library(CellChat)
runApp()
rsconnect::setAccountInfo(name='millerlab', token='AEFA436D8EA1A42AB5F9B1E9BD25E502', secret='7pFGTQxWjj9LNAklpQJoiCm/X9J4CmdeUdJsJ0Hb')
runApp()
runApp()
install.packages('Kmisc')
library(ggforce)
install.packages("ggforce")
library(ggforce)
shiny::runApp()
shiny::runApp()
library(clustree)
# install.packages("remotes")
remotes::install_github("lazappi/clustree@develop", dependencies = TRUE,
build_vignettes = TRUE)
# install.packages("remotes")
# remotes::install_github("lazappi/clustree@develop", dependencies = TRUE,
#                        build_vignettes = TRUE)
data("nba_clusts")
library(clustree)
# install.packages("remotes")
# remotes::install_github("lazappi/clustree@develop", dependencies = TRUE,
#                        build_vignettes = TRUE)
data("sc_example")
names(sc_example)
# install.packages("remotes")
# remotes::install_github("lazappi/clustree@develop", dependencies = TRUE,
#                        build_vignettes = TRUE)
data("sc_example")
names(sc_example)
suppressPackageStartupMessages(library("SingleCellExperiment"))
sce <- SingleCellExperiment(assays = list(counts = sc_example$counts,
logcounts = sc_example$logcounts),
colData = sc_example$sc3_clusters,
reducedDims = SimpleList(TSNE = sc_example$tsne))
head(colData(sce))
clustree(sce, prefix = "sc3_", suffix = "_clusters")
plaqviewobj <- readRDS(file = "data/Alencar_2020/Alencar_2020.rds")
seurat[['TSNE']] <- Seurat::RunTSNE(plaqviewobj)
#### LIBRARIES ####
# library(BiocManager)
library(shiny)
library(shinythemes)
library(Seurat)
library(shinybusy) #install.packages("shinybusy")
library(enrichR) # install.packages("enrichR")
# library(imager)
library(waiter)
library(DT)
library(readxl)
library(shinyWidgets)
library(shinyjs)
# library(RColorBrewer)
library(rDGIdb) # BiocManager::install("rDGIdb")
library(tidyverse)
library(rsconnect)
# library(CellChat)
#### STEP2: SEURAT PROCESS ####
# Run the standard workflow for visualization and clustering
plaqviewobj <- NormalizeData(plaqviewobj)
plaqviewobj <- FindVariableFeatures(plaqviewobj, verbose = T, nfeatures = 2000)
plaqviewobj <- ScaleData(plaqviewobj, verbose = T)
plaqviewobj <- RunPCA(plaqviewobj, npcs = 30, verbose = FALSE)
plaqviewobj <- RunUMAP(plaqviewobj, reduction = "pca", dims = 1:20)
plaqviewobj <- RunTSNE(plaqviewobj, reduction = "pca", dims = 1:20)
plaqviewobj <- FindNeighbors(plaqviewobj, reduction = "pca", dims = 1:20)
plaqviewobj <- FindClusters(plaqviewobj, resolution = 0.5)
clustree(plaqviewobj, prefix = "res.")
clustree(plaqviewobj)
View(plaqviewobj)
clustree(plaqviewobj, prefix = plaqviewobj@reductions[["tsne"]])
names(plaqviewobj)
clustree(plaqviewobj, prefix = "tsne")
clustree(plaqviewobj, prefix = "tsne")
clustree(plaqviewobj, prefix = "umap")
clustree(plaqviewobj)
plaqviewobj <- readRDS(file = "data/Alencar_2020/source_files/UNPROCESSED.rds")
#### STEP2: SEURAT PROCESS ####
# Run the standard workflow for visualization and clustering
plaqviewobj <- NormalizeData(plaqviewobj)
plaqviewobj <- FindVariableFeatures(plaqviewobj, verbose = T, nfeatures = 2000)
plaqviewobj <- ScaleData(plaqviewobj, verbose = T)
plaqviewobj <- RunPCA(plaqviewobj, npcs = 30, verbose = FALSE)
plaqviewobj <- RunUMAP(plaqviewobj, reduction = "pca", dims = 1:20)
plaqviewobj <- RunTSNE(plaqviewobj, reduction = "pca", dims = 1:20)
plaqviewobj <- FindNeighbors(plaqviewobj, reduction = "pca", dims = 1:20)
plaqviewobj <- FindClusters(plaqviewobj, resolution = 0.5)
clustree(plaqviewobj)
clustree(plaqviewobj, prefix = group_by(RNA_snn_res.))
install.packages("tidyverse")
library(tidyverse)
clustree(plaqviewobj, prefix = group_by(RNA_snn_res.))
head(plaqviewobj[[]])
plaqviewobj <- FindClusters(plaqviewobj, resolution = 0.1)
head(plaqviewobj[[]])
plaqviewobj <- RunPCA(plaqviewobj, npcs = 30, verbose = FALSE)
plaqviewobj <- RunUMAP(plaqviewobj, reduction = "pca", dims = 1:20)
plaqviewobj <- RunTSNE(plaqviewobj, reduction = "pca", dims = 1:20)
plaqviewobj <- FindNeighbors(plaqviewobj, reduction = "pca", dims = 1:20)
plaqviewobj <- FindClusters(plaqviewobj, resolution = 0.1)
plaqviewobj <- FindClusters(plaqviewobj, resolution = 0.2)
plaqviewobj <- FindClusters(plaqviewobj, resolution = 0.3)
plaqviewobj <- FindClusters(plaqviewobj, resolution = 0.4)
clustree(plaqviewobj )
clustree_overlay(plaqviewobj, x_value = "PC1", y_value = "PC2")
clustree_overlay(plaqviewobj, x_value = "UMAP_1", y_value = "UMAP_2")
plaqviewobj
Seurat::Idents(plaqviewobj) <- plaqviewobj$Author_Provided
clustree(plaqviewobj,)
clustree(plaqviewobj)
renv::clean()
renv::restore
renv::restore(\)
renv::restore()
install.packages("BiocManager")
renv::deactivate()
renv::activate()
install.packages(c("BiocManager"), "Seurat")
install.packages(c("BiocManager", "Seurat", "tidyverse"))
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
